import type { container, Command } from '@sapphire/framework';

import type { SlashCommandSubcommandBuilder } from '@discordjs/builders';

/**
 * **Subcommand options**
 *
 * Options to register a command as a subcommand of a parent command.
 *
 * @since 1.0.0
 */
export interface SubcommandOptions {
	registerSubCommand?: {
		parentCommandName: string;
		slashSubcommand?:
			| SlashCommandSubcommandBuilder
			| ((subcommandGroup: SlashCommandSubcommandBuilder, Container: typeof container) => SlashCommandSubcommandBuilder);
	};
	registerSubcommandInGroup?: {
		parentCommandName: string;
		groupName: string;
		slashSubcommand?:
			| SlashCommandSubcommandBuilder
			| ((subcommandGroup: SlashCommandSubcommandBuilder, Container: typeof container) => SlashCommandSubcommandBuilder);
	};
}

export type CommandOptions = SubcommandOptions;

export interface SubcommandMappingCollection {
	slashCommand?: SlashCommandSubcommandBuilder;
	commandPiece: Command;
}

/**
 * Internal plugin options of `@kaname-png/plugin-subcommands-advanced`
 *
 * Defines options to control the plugin behavior.
 *
 * @since 1.2.2
 */
export interface PluginSubcommandOptions {
	/**
	 * Update the `name` option of the command options with a name auto-generated by the plugin.
	 *
	 * This does not change the name of the subcommand as such, it only changes the `name` property of the command's internal options.
	 *
	 * This helps to keep command classes from collapsing with repeated names (@sapphire/pieces does not load 2 pieces with the same name) and avoids having to manually put a special name for each command.
	 *
	 * **Subcommands**
	 *
	 * @example Subcommands
	 * ```
	 * Parent command = "utils"
	 * Subcommand name = "ping"
	 * Name autogenerated = "utils/ping"
	 * ```
	 *
	 * **Subcommands group**
	 *
	 * @example
	 * ```
	 * Parent command = "search"
	 * Group name = "anime"
	 * Subcommand name = "watch"
	 * Name autogenerated = "search/anime/watch"
	 * ```
	 *
	 * @since 1.2.2
	 */
	nameCommandsAutogenerated?: boolean;
}

/**
 * **Events**
 *
 * Names of events that will be called when a subcommand does not comply with the preconditions established in the command options.
 * These events are specific to the plugin.
 *
 * @since 1.0.0
 */
export const SubcommandsAdvancedEvents = {
	ChatInputSubcommandDenied: 'chatInputSubcommandDenied' as const,
	MessageSubcommandDenied: 'messageSubcommandDenied' as const
};
