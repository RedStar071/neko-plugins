/* eslint-disable @typescript-eslint/no-base-to-string */
import { createClassDecorator, createProxy } from '@sapphire/decorators';
import { Command, container, Piece } from '@sapphire/framework';

import { SlashCommandSubcommandBuilder } from '@discordjs/builders';

import { analizeSubcommandGroupParsed, analizeSubCommandParsed } from './functions';

export const RegisterSubCommand = (
	parentCommandName: string,
	Subcommand:
		| SlashCommandSubcommandBuilder
		| ((subcommandGroup: SlashCommandSubcommandBuilder, Container: typeof container) => SlashCommandSubcommandBuilder)
		| string
) => {
	return createClassDecorator((target: typeof Piece) =>
		createProxy(target, {
			construct: (ctor, [context, baseOptions]: [Piece.Context, Piece.Options]) => {
				const slashSubcommandParsed =
					typeof Subcommand === 'function' ? Subcommand(new SlashCommandSubcommandBuilder(), container) : Subcommand;

				const ctr = new ctor(context, {
					...baseOptions,
					name:
						container.client.options.subcommandsAdvanced?.nameCommandsAutogenerated === true
							? `${parentCommandName}/${typeof slashSubcommandParsed === 'object' ? slashSubcommandParsed.name : Subcommand}`
							: baseOptions.name
				}) as unknown as Command;

				return analizeSubCommandParsed(ctr, parentCommandName, slashSubcommandParsed);
			}
		})
	);
};

export const RegisterSubCommandGroup = (
	parentCommandName: string,
	groupName: string,
	Subcommand:
		| SlashCommandSubcommandBuilder
		| ((subcommandGroup: SlashCommandSubcommandBuilder, Container: typeof container) => SlashCommandSubcommandBuilder)
		| string
) => {
	return createClassDecorator((target: typeof Piece) =>
		createProxy(target, {
			construct: (ctor, [context, baseOptions]: [Piece.Context, Piece.Options]) => {
				const slashSubcommandParsed =
					typeof Subcommand === 'function' ? Subcommand(new SlashCommandSubcommandBuilder(), container) : Subcommand;

				const ctr = new ctor(context, {
					...baseOptions,
					name:
						container.client.options.subcommandsAdvanced?.nameCommandsAutogenerated === true
							? `${parentCommandName}/${groupName}/${typeof slashSubcommandParsed === 'object' ? slashSubcommandParsed.name : Subcommand}`
							: baseOptions.name
				}) as unknown as Command;

				return analizeSubcommandGroupParsed(ctr, parentCommandName, groupName, slashSubcommandParsed);
			}
		})
	);
};
